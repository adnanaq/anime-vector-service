# METADATA EXTRACTION STAGE - MULTI-SOURCE INTEGRATION
Extract metadata from Jikan, AnimSchedule, Kitsu, Anime-Planet, and AniList APIs with proper categorization merging and consistent output format.

## INPUT DATA
### JIKAN DATA:
{jikan_core_data}

### ANIMESCHEDULE DATA:
{animeschedule_data}

### KITSU DATA:
{kitsu_data}

### ANIME-PLANET DATA:
{animeplanet_data}

### ANILIST DATA:
{anilist_data}

### ANIDB DATA:
{anidb_data}


## EXTRACTION RULES

### CATEGORIZATION & LINKS (Multi-Source Integration):
- **genres**: Extract from Jikan genres + AnimSchedule genres + Anime-Planet genres + Anilist genres (combine, no duplicates)
- **demographics**: Extract from Jikan demographics array only
- **themes**: Extract from Jikan themes + Kitsu categories + AniList tags + AniDB tags with intelligent merging:
  1. Add all Jikan themes with their descriptions (null if no description)
  2. For each source in priority order (Kitsu → AniList → AniDB):
     - Kitsu: Process category.attributes.title → name, category.attributes.description → description
     - AniList: Process tag.name → name, tag.description → description
     - AniDB: Process tag.name → name, tag.description → description
     - For each theme from current source:
       - Skip if name exists in genres (case-insensitive comparison)
       - Skip if theme name already exists AND has description (case-insensitive comparison)
       - If theme name exists but has null description: Update that theme's description only
       - Otherwise: Add new theme with name + description
- **external_links**: Extract from all available sources (see EXTERNAL LINK PROCESSING section for details and section 4 for deduplication rules)
- **synonyms**: Extract from offline database + all sources that provide alternative titles with intelligent merging:
  1. Start with existing offline database synonyms as foundation
  2. For each source in priority order (Jikan → AniList → Kitsu → Anime-Planet → AnimSchedule → AniDB):
     - Jikan: Process all entries from titles.synonyms array
     - AniList: Process all entries from synonyms array
     - Kitsu: Process all entries from abbreviatedTitles array  
     - Anime-Planet: Process all entries from alternative titles
     - AnimSchedule: Process all entries from names.synonyms array
     - AniDB: Process all entries from titles.synonyms array
     - For each title from current source:
       - Skip if already exists in main titles (title_japanese, title_english, canonicalTitle) - case-insensitive
       - Skip if already exists in synonyms array - case-insensitive comparison
       - Skip if it's just a minor variation (different spacing/punctuation) of existing synonym
       - Otherwise: Add unique synonym to array
  3. Apply final cleanup:
     - Remove any duplicates that might have been missed
     - Remove empty strings or null values
     - Trim whitespace from all entries
     - Combine all unique synonyms into a single array
- **images**: Extract from Jikan + AnimSchedule + Kitsu + Anime-Planet + AniList + AniDB organized by image type:
  - Jikan: Extract from images.jpg.large_image_url → add to covers array
  - AnimSchedule: Extract from imageVersionRoute (prepend "https://img.animeschedule.net/production/assets/public/img/") → add to covers array
  - Kitsu: Extract with type inference:
    - posterImage.original → add to posters array
    - coverImage.original → add to covers array
  - Anime-Planet: Extract from multiple sources → add to covers array:
    - json_ld.image → add to covers array
    - opengraph.image → add to covers array (if different URL)
  - AniList: Extract with type inference:
    - coverImage.extraLarge → add to covers array
    - bannerImage → add to banners array
  - AniDB: Extract from picture field (prepend "https://cdn.anidb.net/images/main/") → add to covers array
  - Ensure no duplication of URLs within each image type array
  - Add source attribution ("jikan", "animeschedule", "kitsu", "animeplanet", "anilist", "anidb") to each image
- **source_material**: Extract from Jikan source field, use AniList source as fallback if Jikan is null/missing
- **type**: Cross-validate with offline database type (use offline DB if consistent, otherwise hierarchy: Offline DB → Jikan → AniList → Kitsu)
- **rating**: Extract from Jikan rating field
- **content_warnings**: Infer from Jikan rating and content
- **synopsis**: Extract using source hierarchy for best quality description:
  1. **AniDB**: description field (highest priority - most comprehensive with production context)
     - Processing: Remove hyperlinks `[link text]` → `link text`, clean markup `[i]text[/i]` → `text`
  2. **Jikan**: synopsis field (high priority - narrative excellence with character development)
  3. **AnimSchedule**: description field (medium priority - comprehensive but needs HTML cleanup)
     - Processing: Convert HTML entities `&#39;` → `'`, `&#34;` → `"`, remove `<br>` tags
  4. **Kitsu**: synopsis or description field (medium priority - clean alternative to AnimSchedule)
  5. **Anime-Planet**: description from json_ld field (lower priority - concise and accessible)
  6. **AniList**: description field (fallback only - basic plot outline)
     - Processing: Remove `<br>` tags, minimal content
  - Apply source-specific formatting cleanup as specified above
  - Ensure final synopsis is coherent and complete

### CORE METADATA (Jikan Primary):
- **title_japanese**: Extract Japanese title from Jikan
- **title_english**: Extract English title from Jikan
- **background**: Extract background information from Jikan
- **trailers**: Extract from all available sources with deduplication:
  - **Jikan**: Extract from trailer object:
    - youtube_url: trailer.url 
    - thumbnail_url: trailer.images.maximum_image_url (fallback to last item in trailer.images if maximum_image_url unavailable)
    - title: trailer.title (if available)
  - **AniList**: Extract from trailer object:
    - youtube_url: Convert trailer.id to full YouTube URL "https://www.youtube.com/watch?v={trailer.id}"
    - thumbnail_url: trailer.thumbnail 
    - title: trailer.site + " Trailer" (if no specific title available)
  - **Kitsu**: Extract from youtubeVideoId:
    - youtube_url: Convert youtubeVideoId to full YouTube URL "https://www.youtube.com/watch?v={youtubeVideoId}"
    - thumbnail_url: null (Kitsu doesn't provide thumbnail URLs)
    - title: "Official Trailer"
  - Ensure no duplicate YouTube URLs across all trailers
  - Only include trailers with valid YouTube URLs
  - Combine all unique trailers into single array
- **aired_dates**: Extract aired information from Jikan (from, to, string)
- **broadcast**: Extract broadcast information from Jikan (day, time, timezone)

### ANIMESCHEDULE ENHANCEMENTS:
- **broadcast_schedule**: Extract broadcast timing information from AnimeSchedule:
  - jpn_time: AnimSchedule jpnTime field (original Japanese broadcast time)
  - sub_time: AnimSchedule subTime field (subtitled version release time)
  - dub_time: AnimSchedule dubTime field (dubbed version release time)
- **premiere_dates**: Extract premiere information from AnimeSchedule:
  - original: AnimSchedule premier field (first Japanese episode date)
  - sub: AnimSchedule subPremier field (first subtitled episode date)
  - dub: AnimSchedule dubPremier field (first dubbed episode date)
- **delay_information**: Extract delay status from AnimeSchedule:
  - delayed_timetable: AnimSchedule delayedTimetable field
  - delayed_from: AnimSchedule delayedFrom field
  - delayed_until: AnimSchedule delayedUntil field
  - delay_reason: AnimSchedule delayedDesc field (reason for delay)
- **episode_overrides**: Extract episode override information from AnimeSchedule:
  - main_override: AnimSchedule episodeOverride object (overrideDate, overrideEpisode, episodesAired)
  - sub_override: AnimSchedule subEpisodeOverride object (overrideDate, overrideEpisode, episodesAired)
  - dub_override: AnimSchedule dubEpisodeOverride object (overrideDate, overrideEpisode, episodesAired)
- **month**: Extract premiere month from AnimSchedule

### KITSU ENHANCEMENTS:
- **nsfw**: Extract from nsfw field (boolean)

### CROSS-VALIDATION PROPERTIES:
- **episodes**: Cross-validate across all sources with offline database episode count (use offline DB if consistent, otherwise hierarchy: Offline DB → Jikan → AniList → Kitsu)
- **status**: Cross-validate across sources with offline database status (use offline DB if consistent, otherwise hierarchy: Offline DB → Jikan → AniList → Kitsu)
- **anime_season**: Cross-validate existing offline database animeSeason.season and animeSeason.year with external sources (use offline DB if consistent, otherwise hierarchy: Offline DB → Jikan → AniList → AnimSchedule)
- **duration**: Cross-validate existing offline database duration (int seconds or dict with value/unit) with external sources (use offline DB if consistent, otherwise hierarchy: Offline DB → Jikan → AniList → Kitsu)

### ANIME-PLANET ENHANCEMENTS:
- **dates**: Cross-validate json_ld.startDate/endDate with existing aired dates
- **studios**: Cross-validate studios array with existing studio data
- **images**: Extract Anime-Planet images and add to covers array:
  - json_ld.image → add to covers array with source "animeplanet"
  - opengraph.image → add to covers array with source "animeplanet" (if different URL)

### ANILIST ENHANCEMENTS:
- **source_material**: Use as fallback if Jikan source field is null/missing (Light Novel, Manga, etc.)
- **type**: Use AniList format field for cross-validation of Jikan type field (TV, Movie, OVA, Special, etc.)

### EXTERNAL LINK PROCESSING:
- **external_links**: Add platform URLs to external_links:
  - Jikan: Extract from external + streaming
    - Extract name as key and url as value
  - AnimSchedule; Extract from websites
  - AniList: Extract from externalLinks array:
    - Extract only site and url properties
    - Convert site property to lowercase and remove all spaces to create key
    - Use url as the value
    - Skip if URL already exists in external_links from other sources
    - Examples: "Official Site" → "officialsite", "Crunchyroll" → "crunchyroll", "MyAnimeList" → "myanimelist"

## CRITICAL REQUIREMENTS

1. **INTELLIGENT CATEGORIZATION MERGING**: 
   - Combine Jikan and AnimSchedule genres, remove duplicates
   - Intelligent theme merging with case-insensitive comparison:
     - Skip Kitsu categories, AniList tags, and AniDB tags that match existing genre names
     - Skip Kitsu categories, AniList tags, and AniDB tags that match existing theme names with descriptions
     - Update existing themes with null descriptions using Kitsu/AniList/AniDB descriptions
     - Add new themes from Kitsu "categories", AniList "tags", and AniDB "tags" that don't conflict
     - Process Kitsu "categories" first, then AniList "tags", then AniDB "tags" to avoid race conditions

2. **PROPER THEMES STRUCTURE**: 
   - Output themes as single unified array of objects: [{"name": "Theme Name", "description": "Description or null"}]
   - Merge all themes from all sources into one array using the intelligent merging rules above
   - Each theme object format: {"name": "theme_name", "description": "description_text_or_null"}
   - Source field mappings:
     - Jikan themes: theme.name → name, null → description
     - Kitsu categories: category.attributes.title → name, category.attributes.description → description
     - AniList tags: tag.name → name, tag.description → description
     - AniDB tags: tag.name → name, tag.description → description

3. **ORGANIZED IMAGE TYPE HANDLING**: 
   - Extract images from Jikan, AnimSchedule, Kitsu, Anime-Planet, and AniList organized by image type
   - Create separate arrays: posters, covers, banners (and potentially screenshots in future)
   - Type inference rules:
     - Kitsu posterImage.original → posters array
     - Kitsu coverImage.original → covers array
     - AniList coverImage.extraLarge → covers array
     - AniList bannerImage → banners array
     - Jikan, AnimSchedule, and Anime-Planet images → covers array
   - AnimSchedule: prepend "https://img.animeschedule.net/production/assets/public/img/" to imageVersionRoute
   - Ensure no duplication of URLs within each image type array
   - Add source attribution to each image object
   - Do not include type field in image objects (type is implied by array organization)

4. **EXTERNAL LINK DEDUPLICATION**:
   - Extract external links from all available sources (Jikan, AnimSchedule, Anime-Planet, AniList)
   - **Universal key normalization**: Convert ALL external link keys to lowercase (regardless of source)
   - Ensure no duplication of URLs or normalized property names
   - If same normalized key exists from multiple sources, keep only one instance

5. **HANDLE MISSING DATA**: 
   - If any API data is missing or null, set corresponding output fields to null
   - Continue processing with available data sources
   - Do not include statistics section (handled in separate Stage 4)

## OUTPUT FORMAT
**IMPORTANT: The values shown below are EXAMPLES ONLY. Extract actual data from the provided APIs.**
**CRITICAL: Fields must be ordered exactly as shown below to match AnimeEntry schema requirements.**

{
  // =====================================================================
  // SCALAR FIELDS (alphabetical)
  // =====================================================================
  "background": "Fullmetal Alchemist won the TV Feature Award...", // EXAMPLE - Extract actual background
  "episodes": 26, // EXAMPLE - Cross-validate with offline database episode count
  "month": "January", // EXAMPLE - Extract actual premiere month
  "nsfw": false, // EXAMPLE - Extract actual nsfw flag from Kitsu
  "rating": "R - 17+ (violence & profanity)", // EXAMPLE - Extract actual rating
  "source_material": "Manga", // EXAMPLE - Extract from Jikan, fallback to AniList if null
  "status": "Finished", // EXAMPLE - Cross-validate with offline database status
  "synopsis": "Edward Elric, a young, brilliant alchemist, has lost much in his twelve-year life...", // EXAMPLE - Extract actual synopsis
  "title": "Fullmetal Alchemist: Brotherhood", // EXAMPLE - Extract actual title from offline database
  "title_english": "Fullmetal Alchemist", // EXAMPLE - Extract actual English title
  "title_japanese": "鋼の錬金術師", // EXAMPLE - Extract actual Japanese title
  "type": "TV", // EXAMPLE - Extract from Jikan type field, use AniList format as cross-validation/fallback

  // =====================================================================
  // ARRAY FIELDS (alphabetical)
  // =====================================================================
  "content_warnings": ["Violence", "Strong Language"], // EXAMPLE - Extract actual content warnings
  "demographics": ["Shounen"], // EXAMPLE - Extract actual demographic names from Jikan
  "genres": ["Action", "Adventure", "Fantasy", "Drama"], // EXAMPLE - Extract actual genre names from Jikan + AnimSchedule
  "synonyms": ["FMA", "Hagane no Renkinjutsushi", "강철의 연금술사"], // EXAMPLE - Extract actual synonyms from all sources, no duplicates
  "themes": [
    {"name": "Military", "description": null}, // EXAMPLE - From Jikan themes
    {"name": "Magic", "description": "Magic is the art of purportedly manipulating aspects of reality either by supernatural means or through knowledge of unknown occult laws."}, // EXAMPLE - From Kitsu categories
    {"name": "Violence", "description": "Physical force against self or other, compelling action against one's will on pain of being hurt."}
  ],
  "trailers": [
    {
      "youtube_url": "https://www.youtube.com/watch?v=qig4KOK2R2g",
      "thumbnail_url": "https://i.ytimg.com/vi/qig4KOK2R2g/hqdefault.jpg",
      "title": "Official Trailer"
    }
  ], // EXAMPLE - Extract actual trailers from Jikan, AniList, Kitsu with deduplication

  // =====================================================================
  // OBJECT/DICT FIELDS (alphabetical)
  // =====================================================================
  "aired_dates": {
    "from": "2003-10-04T00:00:00+00:00",
    "to": "2004-10-02T00:00:00+00:00",
    "string": "Oct 4, 2003 to Oct 2, 2004"
  }, // EXAMPLE - Extract actual aired dates
  "anime_season": {"season": "SPRING", "year": 1998}, // EXAMPLE - Cross-validate offline database animeSeason with external sources
  "broadcast": {
    "day": "Saturdays",
    "time": "18:00",
    "timezone": "Asia/Tokyo"
  }, // EXAMPLE - Extract actual broadcast info
  "broadcast_schedule": {
    "jpn_time": "2024-01-01T18:00:00+09:00",
    "sub_time": "2024-01-01T19:00:00+09:00",
    "dub_time": "2024-01-01T20:00:00+09:00"
  }, // EXAMPLE - Extract actual AnimSchedule timing
  "delay_information": {
    "delayed_timetable": false,
    "delayed_from": null,
    "delayed_until": null,
    "delay_reason": null
  }, // EXAMPLE - Extract actual delay info
  "duration": 1440, // EXAMPLE - Cross-validate with offline database duration (seconds or dict structure)
  "episode_overrides": {
    "main_override": {
      overrideEpisode: 0,
      episodesAired
    },
    "sub_override": {
      overrideEpisode: 0,
      episodesAired
    },
    "dub_override": {
      overrideEpisode: 0,
      episodesAired
    }
  }, // EXAMPLE - Extract actual episode overrides
  "external_links": {
    "mal": "https://myanimelist.net/anime/121",
    "official": "https://cowboy-bebop.com/",
    "crunchyroll": "https://crunchyroll.com/series/cowboy-bebop"
  }, // EXAMPLE - Extract actual external links with AniList normalized keys
  "images": {
    "posters": [
      {
        "url": "https://media.kitsu.app/anime/poster_images/100/original.jpg",
        "source": "kitsu"
      }
    ],
    "covers": [
      {
        "url": "https://media.kitsu.app/anime/cover_images/100/original.jpg",
        "source": "kitsu"
      }
    ],
    "banners": [
      {
        "url": "https://s4.anilist.co/file/anilistcdn/media/anime/banner/1-T3PJUjFJyRwg.jpg",
        "source": "anilist"
      }
    ]
  }, // EXAMPLE - Organize by image type: "posters", "covers", "banners", etc. Multiple sources can contribute to each type
  "premiere_dates": {
    "original": "2024-01-01",
    "sub": "2024-01-01",
    "dub": "2024-01-15"
  } // EXAMPLE - Extract actual premiere dates
}

**CRITICAL: Use actual data from the APIs, not the example values shown above.**

Return ONLY valid JSON with the exact fields listed above. No explanations or additional text.